}
e.time <- proc.time()[3]
if (verbose > 1)
message(paste("+ finished check.associations in", formatC(e.time -
s.time, digits = 3), "s"))
if (verbose == 1 & !is.null(fn.plot))
message(paste("Plotted associations between features and label",
"successfully to:", fn.plot))
return(siamcat)
}
check.associations2(
siamcat,
#fn.plot = paste0(out_dir,"gt_siamcatA_",t1,t2,".pdf"),
sort.by = 'fc',
prompt = FALSE,
alpha = 0.05,
mult.corr = "fdr",
detect.lim = 10 ^-6,
plot.type = "quantile.box", #"bean", "box", "quantile.box", "quantile.rect"
panels = c("auroc"))
check.associations2 <- function (siamcat, fn.plot = NULL, color.scheme = "RdYlBu", alpha = 0.05,
mult.corr = "fdr", sort.by = "fc", detect.lim = 1e-06, pr.cutoff = 1e-06,
max.show = 50, plot.type = "quantile.box", panels = c("fc",
"auroc"), prompt = TRUE, feature.type = "filtered", verbose = 1)
{
if (verbose > 1)
message("+ starting check.associations")
s.time <- proc.time()[3]
if (!all(panels %in% c("fc", "auroc", "prevalence"))) {
stop("Unknown panel-type selected!")
}
panels <- unique(panels)
if (length(panels) > 3) {
warning("Plot layout is not suited for more than 3 panels.\n                Continuing with first three panels.")
panels <- panels[seq_len(3)]
}
if ((!plot.type %in% c("bean", "box", "quantile.box", "quantile.rect")) ||
length(plot.type) != 1) {
warning("Plot type has not been specified properly! Continue with",
" quantile.box.")
plot.type <- "quantile.box"
}
if (!feature.type %in% c("original", "filtered", "normalized")) {
stop("Unrecognised feature type, exiting...\n")
}
if (feature.type == "original") {
feat <- get.orig_feat.matrix(siamcat)
}
else if (feature.type == "filtered") {
if (is.null(filt_feat(siamcat, verbose = 0))) {
stop("Features have not yet been filtered, exiting...\n")
}
feat <- get.filt_feat.matrix(siamcat)
}
else if (feature.type == "normalized") {
if (is.null(norm_feat(siamcat, verbose = 0))) {
stop("Features have not yet been normalized, exiting...\n")
}
feat <- get.norm_feat.matrix(siamcat)
}
if (any(is.na(feat))) {
stop("Features contain NAs. Exiting...")
}
if ((any(colSums(feat) > 1.01) | any(feat < -0.01)) & feature.type !=
"normalized") {
stop("This function expects compositional data. Exiting...")
}
label <- label(siamcat)
if (label$type == "TEST") {
stop("Can not check assocations for a", " SIAMCAT object with TEST label! Exiting...")
}
if (is.null(fn.plot)) {
message(paste0("### WARNING: Not plotting to a pdf-file.\n",
"### The plot is optimized for landscape DIN-A4 (or similar) ",
"layout.\n### Please make sure that your plotting region is",
" large enough!!!\n### Use at your own risk..."))
if (prompt == TRUE) {
continue <- askYesNo("Are you sure that you want to continue?",
default = TRUE, prompts = getOption("askYesNo",
gettext(c("Yes", "No", "Cancel"))))
}
else {
continue <- TRUE
}
if (!continue || is.na(continue)) {
opt <- options(show.error.messages = FALSE)
on.exit(options(opt))
stop("Exiting...")
}
par.old <- par(no.readonly = TRUE)
}
col <- SIAMCAT::check.color.scheme(color.scheme, label)
if (verbose > 2)
message("+++ analysing features\n")
probs.fc <- seq(0.1, 0.9, 0.05)
if (is.null(associations(siamcat, verbose = 0))) {
result.list <- analyse.binary.marker(feat = feat, label = label,
detect.lim = detect.lim, colors = col, pr.cutoff = pr.cutoff,
mult.corr = mult.corr, alpha = alpha, probs.fc = probs.fc,
take.log = ifelse(feature.type == "normalized", FALSE,
TRUE), verbose = verbose)
associations(siamcat) <- list(assoc.results = result.list$effect.size,
assoc.param = list(detect.lim = result.list$detect.lim,
pr.cutoff = pr.cutoff, probs.fc = probs.fc, mult.corr = mult.corr,
alpha = alpha, feature.type = feature.type))
}
else {
old.params <- assoc_param(siamcat)
new.params <- list(detect.lim = detect.lim, pr.cutoff = pr.cutoff,
probs.fc = probs.fc, mult.corr = mult.corr, alpha = alpha,
feature.type = feature.type)
if (any(all.equal(new.params, old.params) == TRUE)) {
result.list <- list()
result.list$effect.size <- associations(siamcat)
result.list$detect.lim <- assoc_param(siamcat)$detect.lim
}
else {
result.list <- analyse.binary.marker(feat = feat,
label = label, detect.lim = detect.lim, colors = col,
pr.cutoff = pr.cutoff, mult.corr = mult.corr,
alpha = alpha, probs.fc = probs.fc, take.log = ifelse(feature.type ==
"normalized", FALSE, TRUE), verbose = verbose)
associations(siamcat) <- list(assoc.results = result.list$effect.size,
assoc.param = list(detect.lim = result.list$detect.lim,
pr.cutoff = pr.cutoff, probs.fc = probs.fc,
mult.corr = mult.corr, alpha = alpha, feature.type = feature.type))
}
}
temp <- get.plotting.idx(result.list$effect.size, alpha = alpha,
sort.by = sort.by, max.show = max.show, verbose = verbose)
if (is.null(temp)) {
return(siamcat)
}
effect.size <- result.list$effect.size[temp$idx, , drop = FALSE]
truncated <- temp$truncated
detect.lim <- result.list$detect.lim
feat.red <- feat[temp$idx, , drop = FALSE]
if (feature.type == "normalized") {
feat.plot <- feat.red
}
else {
feat.red.log <- log10(feat.red + detect.lim)
feat.plot <- feat.red.log
}
if (verbose > 2)
message("+++ preparing plotting layout")
if (length(panels) == 3) {
layout.mat <- cbind(2, 1, t(seq(3, length.out = length(panels))))
widths <- c(0.5, 0.1, rep(0.4/3, length(panels)))
}
else {
layout.mat <- cbind(2, 1, t(seq(3, length.out = length(panels))))
widths <- c(0.5, 0.1, rep(0.2, length(panels)))
}
if (!is.null(fn.plot)) {
pdf(fn.plot, paper = "special", height = 8.27, width = 11.69)
}
layout(mat = layout.mat, widths = widths)
associations.pvals.plot(p.vals = effect.size$p.adj, alpha = alpha,
verbose = verbose)
associations.margins.plot(species_names = row.names(feat.red),
verbose = verbose)
if (verbose > 2)
message("+++ plotting results")
if (plot.type == "bean") {
associations.bean.plot(feat.plot, label, col = col, take.log = ifelse(feature.type ==
"normalized", FALSE, TRUE), verbose = verbose)
}
else if (plot.type == "box") {
associations.box.plot(feat.plot, label, take.log = ifelse(feature.type ==
"normalized", FALSE, TRUE), col = col, verbose = verbose)
}
else if (plot.type == "quantile.box") {
associations.quantile.box.plot(feat.plot, label, col = col,
take.log = ifelse(feature.type == "normalized", FALSE,
TRUE), verbose = verbose)
}
else if (plot.type == "quantile.rect") {
print("no pvals displayed")
#associations.quantile.rect.plot(feat.plot, label, col = col,
#                                take.log = ifelse(feature.type == "normalized", FALSE,
#                                                  TRUE), verbose = verbose)
}
xlab <- ifelse(feature.type == "normalized", "Normalized abundance",
"Abundance (log10-scale)")
if (!truncated) {
title(main = "Differentially abundant features", xlab = xlab)
}
else {
title(main = paste("Differentially abundant features\nshowing top",
max.show, "features"), xlab = xlab)
}
for (p in panels) {
if (p == "fc") {
associations.fcs.plot(fc.all = effect.size$fc, binary.cols = effect.size$bcol,
verbose = verbose)
}
else if (p == "prevalence") {
associations.pr.shift.plot(pr.shifts = effect.size[,
c("pr.n", "pr.p")], col = col, verbose = verbose)
}
else if (p == "auroc") {
associations.aucs.plot(aucs = effect.size[, c("auc",
"auc.ci.l", "auc.ci.h")], binary.cols = effect.size$bcol,
verbose = verbose)
}
}
if (!is.null(fn.plot)) {
tmp <- dev.off()
}
else {
par(par.old)
}
e.time <- proc.time()[3]
if (verbose > 1)
message(paste("+ finished check.associations in", formatC(e.time -
s.time, digits = 3), "s"))
if (verbose == 1 & !is.null(fn.plot))
message(paste("Plotted associations between features and label",
"successfully to:", fn.plot))
return(siamcat)
}
check.associations2(
siamcat,
#fn.plot = paste0(out_dir,"gt_siamcatA_",t1,t2,".pdf"),
sort.by = 'fc',
prompt = FALSE,
alpha = 0.05,
mult.corr = "fdr",
detect.lim = 10 ^-6,
plot.type = "quantile.box", #"bean", "box", "quantile.box", "quantile.rect"
panels = c("auroc"))
c <- check.associations(
siamcat,
#fn.plot = paste0(out_dir,"gt_siamcatA_",t1,t2,".pdf"),
sort.by = 'fc',
prompt = FALSE,
alpha = 0.05,
mult.corr = "fdr",
detect.lim = 10 ^-6,
plot.type = "quantile.box", #"bean", "box", "quantile.box", "quantile.rect"
panels = c("auroc"))
c
check.associations()
check.associations
check.associations <- function (siamcat, fn.plot = NULL, color.scheme = "RdYlBu", alpha = 0.05,
mult.corr = "fdr", sort.by = "fc", detect.lim = 1e-06, pr.cutoff = 1e-06,
max.show = 50, plot.type = "quantile.box", panels = c("fc",
"auroc"), prompt = TRUE, feature.type = "filtered", verbose = 1)
{
if (verbose > 1)
message("+ starting check.associations")
s.time <- proc.time()[3]
if (!all(panels %in% c("fc", "auroc", "prevalence"))) {
stop("Unknown panel-type selected!")
}
panels <- unique(panels)
if (length(panels) > 3) {
warning("Plot layout is not suited for more than 3 panels.\n                Continuing with first three panels.")
panels <- panels[seq_len(3)]
}
if ((!plot.type %in% c("bean", "box", "quantile.box", "quantile.rect")) ||
length(plot.type) != 1) {
warning("Plot type has not been specified properly! Continue with",
" quantile.box.")
plot.type <- "quantile.box"
}
if (!feature.type %in% c("original", "filtered", "normalized")) {
stop("Unrecognised feature type, exiting...\n")
}
if (feature.type == "original") {
feat <- get.orig_feat.matrix(siamcat)
}
else if (feature.type == "filtered") {
if (is.null(filt_feat(siamcat, verbose = 0))) {
stop("Features have not yet been filtered, exiting...\n")
}
feat <- get.filt_feat.matrix(siamcat)
}
else if (feature.type == "normalized") {
if (is.null(norm_feat(siamcat, verbose = 0))) {
stop("Features have not yet been normalized, exiting...\n")
}
feat <- get.norm_feat.matrix(siamcat)
}
if (any(is.na(feat))) {
stop("Features contain NAs. Exiting...")
}
if ((any(colSums(feat) > 1.01) | any(feat < -0.01)) & feature.type !=
"normalized") {
stop("This function expects compositional data. Exiting...")
}
label <- label(siamcat)
if (label$type == "TEST") {
stop("Can not check assocations for a", " SIAMCAT object with TEST label! Exiting...")
}
if (is.null(fn.plot)) {
message(paste0("### WARNING: Not plotting to a pdf-file.\n",
"### The plot is optimized for landscape DIN-A4 (or similar) ",
"layout.\n### Please make sure that your plotting region is",
" large enough!!!\n### Use at your own risk..."))
if (prompt == TRUE) {
continue <- askYesNo("Are you sure that you want to continue?",
default = TRUE, prompts = getOption("askYesNo",
gettext(c("Yes", "No", "Cancel"))))
}
else {
continue <- TRUE
}
if (!continue || is.na(continue)) {
opt <- options(show.error.messages = FALSE)
on.exit(options(opt))
stop("Exiting...")
}
par.old <- par(no.readonly = TRUE)
}
col <- check.color.scheme(color.scheme, label)
if (verbose > 2)
message("+++ analysing features\n")
probs.fc <- seq(0.1, 0.9, 0.05)
if (is.null(associations(siamcat, verbose = 0))) {
result.list <- analyse.binary.marker(feat = feat, label = label,
detect.lim = detect.lim, colors = col, pr.cutoff = pr.cutoff,
mult.corr = mult.corr, alpha = alpha, probs.fc = probs.fc,
take.log = ifelse(feature.type == "normalized", FALSE,
TRUE), verbose = verbose)
associations(siamcat) <- list(assoc.results = result.list$effect.size,
assoc.param = list(detect.lim = result.list$detect.lim,
pr.cutoff = pr.cutoff, probs.fc = probs.fc, mult.corr = mult.corr,
alpha = alpha, feature.type = feature.type))
}
else {
old.params <- assoc_param(siamcat)
new.params <- list(detect.lim = detect.lim, pr.cutoff = pr.cutoff,
probs.fc = probs.fc, mult.corr = mult.corr, alpha = alpha,
feature.type = feature.type)
if (any(all.equal(new.params, old.params) == TRUE)) {
result.list <- list()
result.list$effect.size <- associations(siamcat)
result.list$detect.lim <- assoc_param(siamcat)$detect.lim
}
else {
result.list <- analyse.binary.marker(feat = feat,
label = label, detect.lim = detect.lim, colors = col,
pr.cutoff = pr.cutoff, mult.corr = mult.corr,
alpha = alpha, probs.fc = probs.fc, take.log = ifelse(feature.type ==
"normalized", FALSE, TRUE), verbose = verbose)
associations(siamcat) <- list(assoc.results = result.list$effect.size,
assoc.param = list(detect.lim = result.list$detect.lim,
pr.cutoff = pr.cutoff, probs.fc = probs.fc,
mult.corr = mult.corr, alpha = alpha, feature.type = feature.type))
}
}
temp <- get.plotting.idx(result.list$effect.size, alpha = alpha,
sort.by = sort.by, max.show = max.show, verbose = verbose)
if (is.null(temp)) {
return(siamcat)
}
effect.size <- result.list$effect.size[temp$idx, , drop = FALSE]
truncated <- temp$truncated
detect.lim <- result.list$detect.lim
feat.red <- feat[temp$idx, , drop = FALSE]
if (feature.type == "normalized") {
feat.plot <- feat.red
}
else {
feat.red.log <- log10(feat.red + detect.lim)
feat.plot <- feat.red.log
}
if (verbose > 2)
message("+++ preparing plotting layout")
if (length(panels) == 3) {
layout.mat <- cbind(2, 1, t(seq(3, length.out = length(panels))))
widths <- c(0.5, 0.1, rep(0.4/3, length(panels)))
}
else {
layout.mat <- cbind(2, 1, t(seq(3, length.out = length(panels))))
widths <- c(0.5, 0.1, rep(0.2, length(panels)))
}
if (!is.null(fn.plot)) {
pdf(fn.plot, paper = "special", height = 8.27, width = 11.69)
}
layout(mat = layout.mat, widths = widths)
associations.pvals.plot(p.vals = effect.size$p.adj, alpha = alpha,
verbose = verbose)
associations.margins.plot(species_names = row.names(feat.red),
verbose = verbose)
if (verbose > 2)
message("+++ plotting results")
if (plot.type == "bean") {
associations.bean.plot(feat.plot, label, col = col, take.log = ifelse(feature.type ==
"normalized", FALSE, TRUE), verbose = verbose)
}
else if (plot.type == "box") {
associations.box.plot(feat.plot, label, take.log = ifelse(feature.type ==
"normalized", FALSE, TRUE), col = col, verbose = verbose)
}
else if (plot.type == "quantile.box") {
associations.quantile.box.plot(feat.plot, label, col = col,
take.log = ifelse(feature.type == "normalized", FALSE,
TRUE), verbose = verbose)
}
else if (plot.type == "quantile.rect") {
associations.quantile.rect.plot(feat.plot, label, col = col,
take.log = ifelse(feature.type == "normalized", FALSE,
TRUE), verbose = verbose)
}
xlab <- ifelse(feature.type == "normalized", "Normalized abundance",
"Abundance (log10-scale)")
if (!truncated) {
title(main = "Differentially abundant features", xlab = xlab)
}
else {
title(main = paste("Differentially abundant features\nshowing top",
max.show, "features"), xlab = xlab)
}
for (p in panels) {
if (p == "fc") {
associations.fcs.plot(fc.all = effect.size$fc, binary.cols = effect.size$bcol,
verbose = verbose)
}
else if (p == "prevalence") {
associations.pr.shift.plot(pr.shifts = effect.size[,
c("pr.n", "pr.p")], col = col, verbose = verbose)
}
else if (p == "auroc") {
associations.aucs.plot(aucs = effect.size[, c("auc",
"auc.ci.l", "auc.ci.h")], binary.cols = effect.size$bcol,
verbose = verbose)
}
}
if (!is.null(fn.plot)) {
tmp <- dev.off()
}
else {
par(par.old)
}
e.time <- proc.time()[3]
if (verbose > 1)
message(paste("+ finished check.associations in", formatC(e.time -
s.time, digits = 3), "s"))
if (verbose == 1 & !is.null(fn.plot))
message(paste("Plotted associations between features and label",
"successfully to:", fn.plot))
return(siamcat)
}
library(SIAMCAT)
check.associations
check.associations
reassignInPackage
trace(check.associations, edit=TRUE)
check.associations(
siamcat,
#fn.plot = paste0(out_dir,"gt_siamcatA_",t1,t2,".pdf"),
sort.by = 'fc',
prompt = FALSE,
alpha = 0.05,
mult.corr = "fdr",
detect.lim = 10 ^-6,
plot.type = "quantile.box", #"bean", "box", "quantile.box", "quantile.rect"
panels = c("auroc"))
library(SIAMCAT)
check.associations(
siamcat,
#fn.plot = paste0(out_dir,"gt_siamcatA_",t1,t2,".pdf"),
sort.by = 'fc',
prompt = FALSE,
alpha = 0.05,
mult.corr = "fdr",
detect.lim = 10 ^-6,
plot.type = "quantile.box", #"bean", "box", "quantile.box", "quantile.rect"
panels = c("auroc"))
library(SIAMCAT)
label.normalized <- create.label(meta=meta,
label='date',
case= "t2",
control= "t0")
siamcat <- siamcat(feat=feat,label=label.normalized,meta=meta)
siamcat <- filter.features(siamcat,filter.method = 'abundance',cutoff = 0.0001)
siamcat <- check.associations(
siamcat,
#fn.plot = paste0(out_dir,"gt_siamcatA_",t1,t2,".pdf"),
sort.by = 'fc',
prompt = FALSE,
alpha = 0.05,
mult.corr = "fdr",
detect.lim = 10 ^-6,
plot.type = "quantile.box", #"bean", "box", "quantile.box", "quantile.rect"
panels = c("auroc"))
detach("package:SIAMCAT", unload=TRUE)
library("SIAMCAT", lib.loc="~/Library/R/3.6/library")
check.associations(
siamcat,
#fn.plot = paste0(out_dir,"gt_siamcatA_",t1,t2,".pdf"),
sort.by = 'fc',
prompt = FALSE,
alpha = 0.05,
mult.corr = "fdr",
detect.lim = 10 ^-6,
plot.type = "quantile.box", #"bean", "box", "quantile.box", "quantile.rect"
panels = c("auroc"))
trace(check.associations, edit=TRUE)
check.associations(
siamcat,
#fn.plot = paste0(out_dir,"gt_siamcatA_",t1,t2,".pdf"),
sort.by = 'fc',
prompt = FALSE,
alpha = 0.05,
mult.corr = "fdr",
detect.lim = 10 ^-6,
plot.type = "quantile.box", #"bean", "box", "quantile.box", "quantile.rect"
panels = c("auroc"))
