gOTU_mat <- as.data.frame(df3)
rownames(gOTU_mat) <- gOTU_mat[,1]
gOTU_mat[,1] <- NULL
gOTU_mat <- as.matrix(gOTU_mat)
# ready
NROW(unique(rownames(gOTU_mat)))
NROW(unique(colnames(gOTU_mat)))
######################################################################
# SAMPLES
# create a sample table for phyloseq
sample_df <- df0
sample_df$sample <- paste0(sample_df$date,"_",sample_df$pig)
NROW(unique(sample_df$sample))
sample_df <- sample_df %>%
dplyr::select(sample,pig,date,cohort,pen,birth_day,breed,weight_category) %>%
group_by(sample) %>%
dplyr::slice(1)
sample_df$gOTU <- NULL
sample_df <- as.data.frame(sample_df)
NROW(sample_df)
head(sample_df)
# reorder dates
sample_df$date  = factor(sample_df$date, levels=c("t0",
"t1",
"t2",
"t3",
"t4",
"t5",
"t6",
"t7",
"t8",
"t9",
"t10",
"no-t"))
# reorder cohorts
sample_df$cohort  = factor(sample_df$cohort, levels=c("Control",
"D-Scour",
"ColiGuard",
"Neomycin",
"NeoD",
"NeoC",
"Mothers"))
rownames(sample_df) <- sample_df[,1]
# ready
######################################################################
# create phyloseq object
gOTU = otu_table(gOTU_mat, taxa_are_rows = TRUE)
TAX = tax_table(taxa_mat)
samples = sample_data(sample_df)
############################################################################################################
# PLOT
######################
# ORDINATION
# NORMALIZATION BY MEDIAN SEQUENCING DEPTH
carbom <- phyloseq(gOTU,TAX,samples)
# SUBSETTING phyloseq obejct
carbom <- subset_samples(carbom, (date %in% c("t0","t1","t2","t3","t4","t5","t6","t7","t8","t9")))
# Normalize number of reads in each sample using median sequencing depth.
total = median(sample_sums(carbom))
standf = function(x, t=total) round(t * (x / sum(x)))
carbom = transform_sample_counts(carbom, standf)
sample_variables(carbom)
# keep only very abundant OTUs
# taking gOTUs that represent at least 3% of the sample and present in at least 40 samples
carbom_abund <- filter_taxa(carbom, function(x) sum(x > total*0.03) > 40, TRUE)
carbom_abund.ord <- ordinate(carbom_abund, "NMDS", "bray")
dRep_ordination_plot <- plot_ordination(carbom_abund, carbom_abund.ord, type="samples", color="date") +
geom_point(size=1) +
theme_bw()+
theme(axis.title = element_text(size=9),
axis.text = element_text(size=7))+
guides(colour = guide_legend(nrow = 1))+
theme(legend.position="top")
pdf(paste0(out_dir,"dRep_phylo_ordination.pdf"))
dRep_ordination_plot #+
#facet_wrap(~cohort)
dev.off()
# upload libraries
library(readr)
library(tidyverse)
library(dplyr)
library(robCompositions)
library(microbiome)
library(phyloseq)
library(ggplot2)
library(ape)
######################################################################
middle_dir = "/Users/12705859/metapigs_dry/middle_dir/" # git
out_dir = "/Users/12705859/Desktop/metapigs_dry/checkm/"  # local
# input files:
# checkm/checkm_all_nearly
# no_reps_all.csv (BINS COUNTS)
# OUTPUTS:
# cm_phylo_barplot.pdf
# cm_phylo_heatmap.pdf
# cm_phylo_ordination.pdf
# cm_phylo_diversity.pdf
# cm_phylo_network.pdf
######################################################################
# counts data
# upload bins with counts (sample-dereplicated- output of 7.R)
no_reps_all <- read.csv(paste0(middle_dir,"no_reps_all.csv"),
na.strings=c("","NA"),
check.names = FALSE,
header = TRUE)
# remove .fa extension to match bins in checkm df
no_reps_all$bin <- gsub(".fa","", no_reps_all$bin)
######################################################################
# checkM output of NEARLY COMPLETE bins
# upload file
# careful cause we don't have the pigID to distinguish which bins to which sample
checkm_all_nearly <- read_delim(paste0(middle_dir,"checkm_all_nearly"),
"\t", escape_double = FALSE, col_types = cols(pigid = col_character()),
trim_ws = TRUE)
# some formatting
checkm_all_nearly$Completeness <- as.numeric(checkm_all_nearly$Completeness)
checkm_all_nearly$Contamination <- as.numeric(checkm_all_nearly$Contamination)
# remove rows containing NAs as in the original file these rows where headers
checkm_all_nearly <- na.omit(checkm_all_nearly)
# filter >90 <5 bins
checkm_all_nearly <- dplyr::filter(checkm_all_nearly, !grepl("Completeness",Completeness))
newdata <- subset(checkm_all_nearly, Completeness >= 90 & Contamination <= 5)
# rename cols to matching colnames between dataframes to merge
colnames(newdata)[colnames(newdata)=="pigid"] <- "pig"
colnames(newdata)[colnames(newdata)=="Bin Id"] <- "bin"
colnames(newdata)[colnames(newdata)=="Taxonomy (contained)"] <- "taxa"
newdata <- newdata %>%
select(pig,bin,taxa)
######################################################################
# create "gOTU" table: a separate "gOTU" identifier for each different taxa
new <- newdata
# split taxa column into several (kingdom, phylum, etc ...)
new$all_taxa <- new$taxa
new <- cSplit(new, "taxa", sep=";")
head(new)
colnames(new) <- c("pig","bin","all_taxa","kingdom","phylum","class","order","family","genus","species")
head(new)
NROW(new)
new <- new %>%
dplyr::group_by(all_taxa) %>%
dplyr::mutate(gOTU = paste0("gOTU_",group_indices()))
taxa_mat <- new[4:11]
NROW(taxa_mat)
NROW(unique(taxa_mat$gOTU))
taxa_mat <- taxa_mat %>%
dplyr::distinct()
NROW(taxa_mat)
NROW(unique(taxa_mat$gOTU))
taxa_mat_df <- as.data.frame(taxa_mat)
# to matrix
taxa_mat <- taxa_mat_df
rownames(taxa_mat) <- taxa_mat[,8]
taxa_mat[,8] <- NULL
taxa_mat <- as.matrix(taxa_mat)
# ready
NROW(unique(rownames(taxa_mat)))
head(taxa_mat_df)
############################################################################################################
df <- right_join(no_reps_all, new, by=c("pig","bin"))
head(df)
NROW(df)
NROW(unique(paste0(df$pig,df$date)))
NROW(unique(paste0(df$gOTU)))
# columns to be kept
keep <- c("cohort","pig","bin","date","value","gOTU")
df1 <- df[ , (names(df) %in% keep)]
# NA to zeros
df1$value[is.na(df1$value)] <- 0
# as dates with NA was giving problems, change to class character and swap date NAs with "no-t"
df1$date <- as.character(df1$date)
df1$date[is.na(df1$date)] <- "no-t"
NROW(df1)
# sum up all the counts from the same sample (pig and date) that belong to the same gOTU
df2 <- df1 %>%
group_by(pig,date,gOTU) %>%
dplyr::summarise(all_bins_value = sum(value))
NROW(df2)
NROW(unique(paste0(df2$pig,df2$date)))
# assign a unique sample name
df2$sample <- paste0(df2$pig,"_",df2$date)
# remove now pig and date (redundant)
df2 <- df2[3:5]
# long to wide
df3 <- df2 %>%
pivot_wider(names_from = sample, values_from = all_bins_value, values_fill = list(all_bins_value = 0))
# to matrix
gOTU_mat <- as.data.frame(df3)
rownames(gOTU_mat) <- gOTU_mat[,1]
gOTU_mat[,1] <- NULL
gOTU_mat <- as.matrix(gOTU_mat)
mode(gOTU_mat) <- "integer"
# ready to transform to gOTU table
NROW(unique(rownames(gOTU_mat)))
NROW(unique(colnames(gOTU_mat)))
############################################################################################################
# create a sample table
df_dummy <- df1
df_dummy$sample_name <- paste0(df_dummy$pig,"_",df_dummy$date,"_")
df_dummy <- df_dummy %>%
dplyr::select(sample_name, everything())
df_dummy <- df_dummy[,1:2]
head(df_dummy)
df_dummy$sample_name2 <- df_dummy$sample_name
df_dummy <- cSplit(df_dummy, "sample_name2", sep="_")
colnames(df_dummy) <- c("sample_name","cohort","pig","date")
NROW(df_dummy)
df_dummy$sample_name <- df_dummy$sample_name %<>%
gsub('_$', '', .)  # removes the last _
df_dummy <- unique(df_dummy)
sample_df <- as.data.frame(df_dummy)
rownames(sample_df) <- sample_df[,1]
# reorder dates
sample_df$date  = factor(sample_df$date, levels=c("t0",
"t1",
"t2",
"t3",
"t4",
"t5",
"t6",
"t7",
"t8",
"t9",
"t10"))
# reorder cohorts
sample_df$cohort  = factor(sample_df$cohort, levels=c("Control",
"D-Scour",
"ColiGuard",
"Neomycin",
"NeoD",
"NeoC"))
############################################################################################################
# create phyloseq object
gOTU = otu_table(gOTU_mat, taxa_are_rows = TRUE)
TAX = tax_table(taxa_mat)
samples = sample_data(sample_df)
######################
# ORDINATION
# NORMALIZATION BY MEDIAN SEQUENCING DEPTH
carbom <- phyloseq(gOTU,TAX,samples)
# SUBSETTING phyloseq obejct
carbom <- subset_samples(carbom, (date %in% c("t0","t1","t2","t3","t4","t5","t6","t7","t8","t9")))
# Normalize number of reads in each sample using median sequencing depth.
total = median(sample_sums(carbom))
standf = function(x, t=total) round(t * (x / sum(x)))
carbom = transform_sample_counts(carbom, standf)
sample_variables(carbom)
# keep only very abundant OTUs
# taking gOTUs that represent at least 3% of the sample and present in at least 40 samples
carbom_abund <- filter_taxa(carbom, function(x) sum(x > total*0.03) > 40, TRUE)
carbom_abund.ord <- ordinate(carbom_abund, "NMDS", "bray")
cm_ordination_plot <- plot_ordination(carbom_abund, carbom_abund.ord, type="samples", color="date") +
geom_point(size=1) +
theme_bw()+
theme(axis.title = element_text(size=9),
axis.text = element_text(size=7))+
guides(colour = guide_legend(nrow = 1))+
theme(legend.position="top")
pdf(paste0(out_dir,"cm_phylo_ordination.pdf"))
cm_ordination_plot #+
#facet_wrap(~cohort)
dev.off()
library(readr)
library(splitstackshape)
library(tidyr)
library(phyloseq)
library(dplyr)
library(ggplot2)
library(viridis)
source_dir = "/Users/12705859/metapigs_dry/source_data/" # git
middle_dir = "/Users/12705859/metapigs_dry/middle_dir/" # git
out_dir_git = "/Users/12705859/metapigs_dry/out/" # git
out_dir = "/Users/12705859/Desktop/metapigs_dry/gtdbtk/"  # local
######################################################################
# input files:
# gtdbtk_bins_completeTaxa
# no_reps_pos_controls.csv (BINS COUNTS)
# OUTPUTS:
# gt_phylo_PosControls_barplot.pdf
# gt_phylo_PosControls_heatmap.pdf
######################################################################
# counts data
no_reps_pos_controls <- read.csv(paste0(middle_dir,"no_reps_pos_controls.csv"),
na.strings=c("","NA"),
check.names = FALSE,
header = TRUE)
# remove .fa extension to match bins in checkm df
no_reps_pos_controls$bin <- gsub(".fa","", no_reps_pos_controls$bin)
head(no_reps_pos_controls)
NROW(no_reps_pos_controls)
colnames(no_reps_pos_controls)[colnames(no_reps_pos_controls) == 'isolation_source'] <- 'pig'
######################################################################
# load gtdbtk assignments of the bins
gtdbtk_bins <- read_csv(paste0(middle_dir,"gtdb_bins_completeTaxa"),
col_types = cols(node = col_character(),
pig = col_character()))
head(gtdbtk_bins)
######################################################################
# merge info
NROW(gtdbtk_bins)
NROW(no_reps_pos_controls)
head(gtdbtk_bins)
head(no_reps_pos_controls)
df <- merge(no_reps_pos_controls, gtdbtk_bins, by=c("pig","bin"))
# rename node as gOTU and place "gOTU_" in front of node number: a separate genomic OTU identifier for each different genome
colnames(df)[colnames(df) == 'node'] <- 'gOTU'
df$gOTU <- paste0("gOTU_",df$gOTU)
NROW(unique(df$gOTU))
NROW(df)
# change Protexin with D-Scour
df$pig <- gsub("Protexin","D-Scour", df$pig)
######################################################################
# TAXA
taxa_mat <- df %>%
dplyr::select(gOTU,species,genus,family,order,class,phylum,domain) %>%
group_by(gOTU) %>%
dplyr::slice(1)
NROW(taxa_mat)
NROW(unique(taxa_mat$gOTU))
taxa_mat_df <- as.data.frame(taxa_mat)
# to matrix
taxa_mat <- taxa_mat_df
rownames(taxa_mat) <- taxa_mat[,1]
taxa_mat[,1] <- NULL
taxa_mat <- as.matrix(taxa_mat)
# ready
NROW(unique(rownames(taxa_mat)))
head(taxa_mat_df)
######################################################################
# gOTU
# columns to be kept
keep <- c("cohort","pig","bin","variable","value","gOTU")
df1 <- df[ , (names(df) %in% keep)]
# NA to zeros
df1$value[is.na(df1$value)] <- 0
# as dates with NA was giving problems, change to class character and swap date NAs with "no-t"
df1$date <- as.character(df1$variable)
NROW(df1)
# sum up all the counts from the same sample (pig and date) that belong to the same OTU
df2 <- df1 %>%
group_by(pig,variable,gOTU) %>%
dplyr::summarise(all_bins_value = sum(value))
NROW(df2)
NROW(unique(paste0(df2$pig,df2$variable)))
# assign a unique sample name
df2$sample <- paste0(df2$pig,"_",df2$variable)
# remove now pig and date (redundant)
df2$pig <- NULL
df2$variable <- NULL
# long to wide
df3 <- df2 %>%
pivot_wider(names_from = sample, values_from = all_bins_value, values_fill = list(all_bins_value = 0))
# to matrix
gOTU_mat <- as.data.frame(df3)
rownames(gOTU_mat) <- gOTU_mat[,1]
gOTU_mat[,1] <- NULL
gOTU_mat <- as.matrix(gOTU_mat)
# ready
NROW(unique(rownames(gOTU_mat)))
NROW(unique(colnames(gOTU_mat)))
######################################################################
# SAMPLES
# create a sample table for phyloseq
sample_df <- df
sample_df$sample <- paste0(sample_df$pig,"_",sample_df$variable)
NROW(unique(sample_df$sample))
sample_df <- sample_df %>%
dplyr::select(sample,pig,variable,cohort) %>%
group_by(sample) %>%
dplyr::slice(1)
sample_df$gOTU <- NULL
sample_df <- as.data.frame(sample_df)
NROW(sample_df)
head(sample_df)
rownames(sample_df) <- sample_df[,1]
# ready
######################################################################
# create phyloseq object
OTU = otu_table(gOTU_mat, taxa_are_rows = TRUE)
TAX = tax_table(taxa_mat)
samples = sample_data(sample_df)
carbom <- phyloseq(OTU,TAX,samples)
############################################################################################################
# NORMALIZATION
# Normalize number of reads in each sample using median sequencing depth.
total = median(sample_sums(carbom))
standf = function(x, t=total) round(t * (x / sum(x)))
carbom = transform_sample_counts(carbom, standf)
sample_variables(carbom)
############################################################################################################
# PLOT
######################
# HEATMAP
sampleOrder = sort(sample_names(carbom))
pos_controls_heatmap <- plot_heatmap(carbom, method = "MDS", distance="unifrac",weighted=TRUE,
taxa.label = "species", taxa.order = "species", sample.order = sampleOrder,
trans = NULL, low="blue", high="red", na.value="blue") +
theme(axis.text.x = element_text(size=9),
axis.title.x = element_text(size=10),
axis.text.y = element_text(size=10),
legend.text = element_text(size=10, vjust=0),
legend.title = element_text(size=11, vjust=0),
legend.position = "right")+
facet_grid(~pig,scales="free")+
labs(x="Replicate",
y="Species",
fill = "Relative\nabundance")
# HEATMAP time - genus, family, order, etc ...
pdf(paste0(out_dir,"gt_phylo_PosControls_heatmap.pdf"))
pos_controls_heatmap
dev.off()
######################
# BAR PLOT
pos_controls_barplot <- plot_bar(carbom, fill = "species") +
facet_wrap(~pig,scales="free") +
theme(axis.text.x = element_text(size=8),
axis.text.y = element_text(size=7, angle=90, vjust=1),
legend.text = element_text(size=9),
legend.position="right")+
labs(x="Replicate",
y="Relative abundance")+
guides(fill=guide_legend(ncol=1,bycol=TRUE))
# BAR GRAPH - by time point
pdf(paste0(out_dir,"gt_phylo_PosControls_barplot.pdf"))
pos_controls_barplot
dev.off()
######################################################################
######################################################################
# function to get barplots : one for each positive control
# (played around with phyloseq subset data but couldn t get levels to drop!)
myfun <- function(single_pos_control_df,palette_type) {
df <- single_pos_control_df
mypalette <- as.character(palette_type)
# TAXA
taxa_mat <- df %>%
dplyr::select(gOTU,species,genus,family,order,class,phylum,domain) %>%
group_by(gOTU) %>%
dplyr::slice(1)
taxa_mat_df <- as.data.frame(taxa_mat)
taxa_mat <- taxa_mat_df
rownames(taxa_mat) <- taxa_mat[,1]
taxa_mat[,1] <- NULL
taxa_mat <- as.matrix(taxa_mat)
# gOTU
keep <- c("cohort","pig","bin","variable","value","gOTU")
df1 <- df[ , (names(df) %in% keep)]
df1$value[is.na(df1$value)] <- 0
df1$date <- as.character(df1$variable)
df2 <- df1 %>%
group_by(pig,variable,gOTU) %>%
dplyr::summarise(all_bins_value = sum(value))
df2$sample <- paste0(df2$pig,"_",df2$variable)
df2$pig <- NULL
df2$variable <- NULL
df3 <- df2 %>%
pivot_wider(names_from = sample, values_from = all_bins_value, values_fill = list(all_bins_value = 0))
gOTU_mat <- as.data.frame(df3)
rownames(gOTU_mat) <- gOTU_mat[,1]
gOTU_mat[,1] <- NULL
gOTU_mat <- as.matrix(gOTU_mat)
# SAMPLES
sample_df <- df
sample_df$sample <- paste0(sample_df$pig,"_",sample_df$variable)
sample_df <- sample_df %>%
dplyr::select(sample,pig,variable,cohort) %>%
group_by(sample) %>%
dplyr::slice(1)
sample_df$gOTU <- NULL
sample_df <- as.data.frame(sample_df)
rownames(sample_df) <- sample_df[,1]
# create phyloseq object
OTU = otu_table(gOTU_mat, taxa_are_rows = TRUE)
TAX = tax_table(taxa_mat)
samples = sample_data(sample_df)
carbom <- phyloseq(OTU,TAX,samples)
##########################################################################
# NORMALIZATION
# Normalize number of reads in each sample using median sequencing depth.
total = median(sample_sums(carbom))
standf = function(x, t=total) round(t * (x / sum(x)))
carbom = transform_sample_counts(carbom, standf)
sample_variables(carbom)
##########################################################################
# PLOT
######################
# BAR PLOT
barplot <- plot_bar(carbom, fill = "species") +
facet_wrap(~pig,scales="free") +
theme(axis.text.x = element_text(size=8),
axis.text.y = element_text(size=7, angle=90, vjust=1),
legend.text = element_text(size=7),
legend.title=element_blank(),
legend.position="top")+
labs(x="Replicate",
y="Relative abundance")+
scale_fill_brewer(palette = as.character(mypalette))+
guides(fill=guide_legend(ncol=1,bycol=TRUE))
return(barplot)
}
df_sub1 <- df %>% dplyr::filter(pig=="MockCommunity")
df_sub2 <- df %>% dplyr::filter(pig=="D-Scour")
df_sub3 <- df %>% dplyr::filter(pig=="ColiGuard")
plot1 <- myfun(df_sub1,as.character("Paired"))
plot2 <- myfun(df_sub2,as.character("Set1"))
plot3 <- myfun(df_sub3,as.character("Set2"))
p123 <- ggarrange(plot1,
plot2,
plot3,
ncol=3)
pdf(paste0(out_dir,"gt_phylo_PosControls_barplotS.pdf"))
p123
dev.off()
######################################################################
